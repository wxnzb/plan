// 1.将长度为 len 的字符串 str 根据切割字符 terminator 切成多个 strbuf,并从结果返回，max 可以用来限定最大切割数量。返回 struct strbuf 的指针数组，数组的最后元素为 NULL
struct strbuf **strbuf_split_buf(const char *str, size_t len, int terminator, int max)
{
    int i = 0;
    char *ch = (char *)str;
    int m = sizeof(str);
    for (int j = 0; j < m - 1; j++)
    {
        if (ch[j] == '\0')
            ch[j] = '`';
    }
    const char s[2] = {(char)terminator, '\0'};
    struct strbuf **p = (struct strbuf **)malloc(sizeof(struct strbuf *) * (max + 1));
    char *r = strtok(ch, s);
    while (r != NULL && i < max)
    {
        int n = strlen(r);
        struct strbuf *q = (struct strbuf *)malloc(sizeof(struct strbuf));
        strbuf_init(q, n + 1);
        memcpy(q->buf, r, n);
        for (int h = 0; h < n; h++)
        {
            if (q->buf[h] == '`')
                q->buf[h] = '\0';
        }
        q->buf[n] = '\0';
        q->len = n;
        p[i] = q;
        i++;
        r = strtok(NULL, s);
    }
    p[i] = NULL;
    return p;
}
// 太开心了！！
// 1.target_str : 目标字符串，str : 前缀字符串，strlen : target_str 长度 ，前缀相同返回 true 失败返回 false
bool strbuf_begin_judge(char *target_str, const char *str, int strnlen)
{
    //     target_str[strnlen]='\0';
    //     if(strcmp(target_str,str)==0)
    if (str == NULL || strncmp(target_str, str, strlen(str)) == 0)
        return true;
    else
        return false;
}
// 1.target_str : 目标字符串，begin : 开始下标，end 结束下标。len : target_buf的长度，参数不合法返回 NULL. 下标从0开始，[begin, end)区
char *strbuf_get_mid_buf(char *target_buf, int begin, int end, int len)
{
    if (target_buf == NULL || begin < 0 || end < 0 || begin > end)
        return NULL;
    int n = end - begin;
    char *ret = (char *)malloc((n + 1) * sizeof(char));
    for (int i = 0; i < n; i++)
        ret[i] = target_buf[begin + i];
    ret[end - begin] = '\0';
    return ret;
}

